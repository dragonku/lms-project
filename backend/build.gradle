plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.2.5'
    id 'checkstyle'
    id 'org.owasp.dependencycheck' version '8.4.3'
}

group = 'com.lms'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    // Testing Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.h2database:h2'
    
    // Test Lombok
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:1.19.3"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// Jacoco Configuration for Test Coverage
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80 // 80% 커버리지 목표
            }
        }
    }
}

// Clean Architecture Layer Testing
task testDomain(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include '**/domain/**/*Test.class'
}

task testApplication(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include '**/application/**/*Test.class'
}

task testInfrastructure(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include '**/infrastructure/**/*Test.class'
}

task testPresentation(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include '**/presentation/**/*Test.class'
}

// Integration Tests
task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    include '**/*IntegrationTest.class'
}

// TDD Helper Tasks
task tddRed(type: Test) {
    description = "Run failing tests to see red phase"
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

// SpotBugs Configuration
spotbugs {
    toolVersion = '4.8.3'
    ignoreFailures = true
    showStackTraces = true
    showProgress = true
    effort = 'max'
    reportLevel = 'medium'
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main.html")
            stylesheet = 'fancy-hist.xsl'
        }
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main.xml")
        }
    }
}

// Checkstyle Configuration
checkstyle {
    toolVersion = '10.12.4'
    ignoreFailures = true
}

checkstyleMain {
    reports {
        xml.required = true
        html.required = true
    }
}

// OWASP Dependency Check Configuration
dependencyCheck {
    format = 'HTML'
    suppressionFile = 'config/owasp/suppressions.xml'
    failBuildOnCVSS = 0
    analyzers {
        experimentalEnabled = false
        archiveEnabled = false
        jarEnabled = true
        centralEnabled = true
        nexusEnabled = false
        pyDistributionEnabled = false
        pyPackageEnabled = false
        rubygemsEnabled = false
        opensslEnabled = false
        cmakeEnabled = false
        autoconfEnabled = false
        composerEnabled = false
        nodeEnabled = false
        nuspecEnabled = false
        assemblyEnabled = false
    }
}

// Quality Check Task
task qualityCheck(dependsOn: [checkstyleMain, spotbugsMain, dependencyCheckAnalyze]) {
    description = "Run all quality checks"
    group = "verification"
}

// Security Check Task
task securityCheck(dependsOn: [dependencyCheckAnalyze]) {
    description = "Run security vulnerability checks"
    group = "verification"
}